#!/bin/bash
count=0
function string_to_dec()
{
  eval ch="$1"
  if [[ $ch = " " ]]; then
    echo 32
    exit
  fi

  bin=$(echo -n $ch | perl -pe '$_=unpack"B*"')
  #echo $bin >>temp
  echo "$((2#$bin))"
}

function bin_to_dec()
{
  eval ch="$1"
  #echo bin=$ch>>temp
  echo "$((2#$ch))"
}

function dec_to_string()
{
  output_file=$2
  #echo $1-count=$count >>temp
  count=$(( $count+1 ))
  printf "\x$(printf %x $1)">>$output_file
}


function calculate_prime_number()
{
  is_prime=false
  prime=-1

  while [ "$is_prime" = false ]
  do
    is_prime=true
    prime=$( shuf -i 1000000-9999999 -n 1 )
    half_prime=$(( $prime / 2 + 1 ))

    for (( i=2 ; i < $half_prime ; i++ ))
    do
      m=$(( $prime % $i ))
      if [[ $m -eq 0 ]]; then
        is_prime=false
        break
      fi
    done
  done

  echo $prime
}

function find_e()
{
  phi=$1
  e=2

  while [ $e -lt $phi ]
  do
    gcd=$(gcd $e $phi)
    if [[ $gcd -eq 1 ]]; then
      break
    else
      e=$(( $e + 1 ))
    fi
  done

  echo $e
}

function find_d()
{
  phi=$1
  e=$2
  found=false
  k=1
  d=$(( ($phi + 1) / $e))
  while [ "$found" = false ]
  do
    d_temp=$(( ($phi * $k) + 1))
    if [[ $(( $d_temp % $e )) -eq 0 ]]; then
      d=$(( $d_temp / $e ))
      found=true
    else
      k=$(( $k + 1 ))
    fi
  done

  echo $d
}

function gcd()
{
  e=$1
  phi=$2
  temp=-1

  while true
  do
    temp=$(( e % $phi))
    if [[ $temp -eq 0 ]]; then
      echo $phi
      break
    fi

    e=$phi;
    phi=$temp;
  done
}

function pow_mod()
{
  base=$1
  exp=$2
  n=$3

  result=1
  while [ $exp -gt 0 ]
  do
    if [[ $(bc <<< "scale=0;$exp%2") -eq 1 ]];then
      result=$(bc <<< "scale=2;$result*$base")
      result=$(bc <<< "scale=0;$result%$n")
    fi
    base=$(bc <<< "scale=2;$base*$base")
    base=$(bc <<< "scale=0;$base%$n")
    exp=$(( $exp / 2 ))
  done
  result=$(bc <<< "scale=0;$result%$n")
  echo $result
}

function action_message_arr_char_by_char()
{
  e=$1
  n=$2
  m_arr=("$@")
  #unstting pow and mod params from s_box arry:
  unset m_arr[0]
  unset m_arr[1]
  m_arr=("${m_arr[@]}")

  for num in "${m_arr[@]}"
  do
    m_e_arr+=($(pow_mod $num $e $n))
  done

  echo "${m_e_arr[@]}"
}

function read_from_file()
{
  in=$1
  str=`cat $in`

  arr=()
  count=0
  while read -n 1 byte; do
    ord=$(printf "%b" "${byte:-\000}" | od -t x1 | { read offset hex; echo $hex; })
    arr+=($ord)
  done < $in

  for ord in "${arr[@]}"
  do
    #echo ord="0x$ord">>temp
    if [[ "0x$ord" -eq 0x00 ]]; then
      str=${str:0:count}'\0'${str:count}
      #echo "in if $str" >>temp
    fi
    count=$(( $count + 1 ))
  done

  echo "$str"
}

function string_w_spaces_to_bin()
{
  eval str="$1"
  #echo string_w_spaces_to_bin_str=$str>>temp
  str_tr=${str/"\0"/""}
  #echo string_w_spaces_to_bin_str_tr=$str_tr>>temp

  bin=$(echo -n "${str_tr}" | perl -pe '$_=unpack"B*"')

  str_len=$(printf "$str" | wc -c)
  #echo str=$str>>temp
  #echo str_len=$str_len >>temp
  for (( i=0 ; i<$str_len ; i++ ))
  do
    ch=${str:i:2}
    #echo ch=$ch >>temp
    if [[ $ch == "\0" ]]; then
      start=$(( $i * 8 ))
      bin=${bin:0:start}"00000000"${bin:start}
    fi
  done

  printf "$bin"
}

action=$1
in_file=$2
output_file=$3
key_file=$4


if [[ $action == "-g" ]]; then
  echo calculating first prime number
  prime1=$( calculate_prime_number )
  prime2=-1

  echo calculating second prime number

  is_dif=false
  while [ "$is_dif" = false ]
  do
    is_dif=true
    prime2=$( calculate_prime_number )
    if [[ $prime2 -eq $prime1 ]]; then
      is_dif=false
    fi
  done


  #echo prime1=$prime1
  #echo prime2=$prime2

  #e & n for public key
  n=$(( $prime1 * $prime2 ))
  echo n=$n

  # Find the Totient of ProductOfPrime1Prime2
  phi=$(( ($prime1 - 1) * ($prime2 - 1) ))
  echo phi=$phi

  #gcd
  e=$(find_e $phi)
  echo "$e $n">$in_file

  #d & n private key
  d=$(find_d $phi $e)
  #d=$(( ($phi + 1) / $e))
  echo "$d $n">$output_file
fi

#split message to array
if [[ $action == "-e" ]]; then
  keys=(`cat $key_file`)
  message=`cat $in_file`

  e=${keys[0]}
  n=${keys[1]}
  message=$(string_w_spaces_to_bin "\${message}")
  echo -n >$output_file #init the out file

  i=0
  while [ $i -lt ${#message} ]
  do
    ch=${message:$i:8}
    message_arr[$i]=$(bin_to_dec $ch)
    i=$((i+8))
  done

  e_m_arr=$(action_message_arr_char_by_char $e $n ${message_arr[@]})
  echo ${e_m_arr[@]}>$output_file
fi

if [[ $action == "-d" ]]; then
  keys=(`cat $key_file`)
  message=(`cat $in_file`)
  echo -n >$output_file #init the out file

  d=${keys[0]}
  n=${keys[1]}

  d_m_arr=$(action_message_arr_char_by_char $d $n ${message[@]})

  for num in ${d_m_arr[@]}
  do
    dec_to_string "${num}" $output_file
  done
  echo >>$output_file
fi
#echo d_arr=${d_arr[@]}
