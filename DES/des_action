#!/bin/bash

PC_1=(  57   49    41   33    25    17    9
        1   58    50   42    34    26   18
        10    2    59   51    43    35   27
        19   11     3   60    52    44   36
        63   55    47   39    31    23   15
        7   62    54   46    38    30   22
        14    6    61   53    45    37   29
        21   13     5   28    20    12    4)

LEFT_SHIFT=(0 1 1 2 2 2 2 2 2 1 2 2 2 2 2 2 1)

PC_2=(  14    17   11    24     1    5
        3    28   15     6    21   10
        23    19   12     4    26    8
        16     7   27    20    13    2
        41    52   31    37    47   55
        30    40   51    45    33   48
        44    49   39    56    34   53
        46    42   50    36    29   32)

IP=(58    50   42    34    26   18    10    2
    60    52   44    36    28   20    12    4
    62    54   46    38    30   22    14    6
    64    56   48    40    32   24    16    8
    57    49   41    33    25   17     9    1
    59    51   43    35    27   19    11    3
    61    53   45    37    29   21    13    5
    63    55   47    39    31   23    15    7)

E_SELECTION=( 32     1    2     3     4    5
              4     5    6     7     8    9
              8     9   10    11    12   13
              12    13   14    15    16   17
              16    17   18    19    20   21
              20    21   22    23    24   25
              24    25   26    27    28   29
              28    29   30    31    32    1)

S1=(14  4  13  1   2 15  11  8   3 10   6 12   5  9   0  7
    0 15   7  4  14  2  13  1  10  6  12 11   9  5   3  8
    4  1  14  8  13  6   2 11  15 12   9  7   3 10   5  0
    15 12   8  2   4  9   1  7   5 11   3 14  10  0   6 13)

S2=(15  1   8 14   6 11   3  4   9  7   2 13  12  0   5 10
    3 13   4  7  15  2   8 14  12  0   1 10   6  9  11  5
    0 14   7 11  10  4  13  1   5  8  12  6   9  3   2 15
    13  8  10  1   3 15   4  2  11  6   7 12   0  5  14  9)

S3=(10  0   9 14   6  3  15  5   1 13  12  7  11  4   2  8
    13  7   0  9   3  4   6 10   2  8   5 14  12 11  15  1
    13  6   4  9   8 15   3  0  11  1   2 12   5 10  14  7
    1 10  13  0   6  9   8  7   4 15  14  3  11  5   2 12)

S4=(7 13  14  3   0  6   9 10   1  2   8  5  11 12   4 15
   13  8  11  5   6 15   0  3   4  7   2 12   1 10  14  9
   10  6   9  0  12 11   7 13  15  1   3 14   5  2   8  4
    3 15   0  6  10  1  13  8   9  4   5 11  12  7   2 14)

S5=(2 12   4  1   7 10  11  6   8  5   3 15  13  0  14  9
   14 11   2 12   4  7  13  1   5  0  15 10   3  9   8  6
    4  2   1 11  10 13   7  8  15  9  12  5   6  3   0 14
   11  8  12  7   1 14   2 13   6 15   0  9  10  4   5  3)

S6=(12  1  10 15   9  2   6  8   0 13   3  4  14  7   5 11
   10 15   4  2   7 12   9  5   6  1  13 14   0 11   3  8
    9 14  15  5   2  8  12  3   7  0   4 10   1 13  11  6
    4  3   2 12   9  5  15 10  11 14   1  7   6  0   8 13)

S7=(4 11   2 14  15  0   8 13   3 12   9  7   5 10   6  1
   13  0  11  7   4  9   1 10  14  3   5 12   2 15   8  6
    1  4  11 13  12  3   7 14  10 15   6  8   0  5   9  2
    6 11  13  8   1  4  10  7   9  5   0 15  14  2   3 12)

S8=(13  2   8  4   6 15  11  1  10  9   3 14   5  0  12  7
    1 15  13  8  10  3   7  4  12  5   6 11   0 14   9  2
    7 11   4  1   9 12  14  2   0  6  10 13  15  3   5  8
    2  1  14  7   4 10   8 13  15 12   9  0   3  5   6 11)

FINAL_P=(16   7  20  21
         29  12  28  17
          1  15  23  26
          5  18  31  10
          2   8  24  14
         32  27   3   9
         19  13  30   6
         22  11   4  25)

IP_1=(40     8   48    16    56   24    64   32
      39     7   47    15    55   23    63   31
      38     6   46    14    54   22    62   30
      37     5   45    13    53   21    61   29
      36     4   44    12    52   20    60   28
      35     3   43    11    51   19    59   27
      34     2   42    10    50   18    58   26
      33     1   41     9    49   17    57   25)

function string_to_bin()
{
  echo $1 | perl -pe '$_=unpack"B*"'
}

function string_w_spaces_to_bin()
{
  eval str="$1"
  echo -n "${str}" | perl -pe '$_=unpack"B*"'
}

function bin_to_string()
{
  eval bin="$1"
  echo -n "${bin}" | perl -pe '$_=pack"B*",$_'
}

function decimal_to_bin()
{
  expected_bits=$2

  val=$(echo "obase=2;$1" | bc)
  val_len=${#val}
  val_len=$(( $expected_bits - $val_len ))
  #append leading zeros
  for (( i=0; i<$val_len; i++))
  do
    val=0$val
  done

  echo $val
}

function bin_to_decimal()
{
  echo "$((2#$1))"
}

function get_bit_from_string_representation()
{
  str=$1
  location=$2
  #echo $location
  str_b=$(string_to_bin $str)
  bit=$(expr substr $str_b $location 1)
  echo $bit
}

function get_bit_from_binary_representation()
{
  str=$1
  location=$2

  bit=$(expr substr $str $location 1)
  echo $bit
}

function left_shift_key_by_num()
{
  key=$1
  amount=$2

  start=$(expr $amount + 1)
  num=$(expr 28 - $amount)

  pre=$(expr substr $key $start $num)
  post=$(expr substr $key 1 $amount)

  echo $pre$post
}

function get_row_for_sbox()
{
  num=$1

  rowb=$(expr substr $num 1 1)$(expr substr $num 6 1)
  rowd=$(bin_to_decimal $rowb)
  echo $rowd
}

function get_column_for_sbox()
{
  num=$1

  colb=$(expr substr $num 2 4)
  echo $(bin_to_decimal $colb)
}

function get_sbox_location()
{
    echo $(( $1 * 16 + $2 ))
}

function get_sbox_value()
{
  row=$1
  col=$2
  s_box=("$@")
  #unstting row and col params from s_box arry:
  unset s_box[0]
  unset s_box[1]
  s_box=("${s_box[@]}")
  loc=$(get_sbox_location $row $col)
  val=${s_box[$loc]}
  val=$(decimal_to_bin $val 4)
  echo $val
}

function padding_message_with_spaces()
{
  eval str="$1"
  str_len=${#str}

  mod=$(( $str_len % 8 ))
  if [[ $mod -ne 0 ]]; then
    pad=$(( 8 - $mod ))

    for (( i=0 ; i<$pad ; i++))
    do
      str+=" "
    done
  fi
  echo "${str}"
}

action=$1
file_key=$2
input_file=$3
out_file=$4

key=`cat $file_key`
echo -n >$out_file

#Original key permutation according to PC-1
key_p=
for (( i=0; i<56 ; i++ ))
do
  index=${PC_1[$i]}
  bit=$(get_bit_from_string_representation $key $index)
  key_p=$key_p$bit
done

c0=$(expr substr $key_p 1 28)
d0=$(expr substr $key_p 29 28)

#left shift actions on right and left 28-bit sections.
c_arr=($c0)
d_arr=($d0)
k_arr=($key_p)
for (( i=1; i<=16 ; i++ ))
do
  previous=$(expr $i - 1)
  curr_d=$(left_shift_key_by_num ${d_arr[$previous]} ${LEFT_SHIFT[$i]})
  curr_c=$(left_shift_key_by_num ${c_arr[$previous]} ${LEFT_SHIFT[$i]})
  d_arr+=($curr_d)
  c_arr+=($curr_c)
  curr_k=$curr_c$curr_d  #concating the right and left 28-bit keys to single 56-bit key
  k_arr+=($curr_k)
done

#echo ${k_arr[@]}

#permutation of 56-bit key after left shift according to PC-2
k_perm_arr=(0)
for (( j=1; j<=16 ; j++))
do
  k_curr_perm=
  for (( i=0; i<48 ; i++ ))
  do
    index=${PC_2[$i]}
    bit=$(get_bit_from_binary_representation ${k_arr[$j]} $index)
    k_curr_perm=$k_curr_perm$bit
  done
  k_perm_arr+=($k_curr_perm)
done

#echo ${k_perm_arr[@]}

#############Starting to encrypt/decrypt the message###################################
file_str=`cat $input_file`
echo file_str=$file_str
file_str_len=${#file_str}
echo file_str_len=$file_str_len
message=$(string_w_spaces_to_bin "\${file_str}")
echo message=$message
file_str=$(padding_message_with_spaces "\${file_str}")
file_str_len=${#file_str}

if [[ $(( $file_str_len % 8 )) -ne 0 ]]; then
  echo padding operation failed.
  exit 1
fi

num_blocks=$(( $file_str_len / 8 ))
echo num_blocks=$num_blocks

for (( block=1 ; block<=$num_blocks ; block++ ))
do
  echo processing block \#$block out of $num_blocks...
  block_index=$(( $(( $block - 1 )) * 8 ))
  #curr_message="$(expr substr "$file_str" $block_index 8)"
  curr_message="${file_str:block_index:8}"
  echo curr_message=$curr_message
  echo len_crr_message=${#curr_message}
  message=$(string_w_spaces_to_bin "\${curr_message}")
  echo message=$message
  echo m_len=${#message}

  #Initial permutation of message block according to IP
  m_ip=
  for (( i=0; i<64 ; i++ ))
  do
    index=${IP[$i]}
    bit=$(get_bit_from_binary_representation $message $index)
    m_ip=$m_ip$bit
  done

  l0=$(expr substr $m_ip 1 32)
  r0=$(expr substr $m_ip 33 32)

  l_arr=($l0)
  r_arr=($r0)

  #starting 16 iterations of function f.
  for (( iter=1; iter<=16 ; iter++ ))
  do
  #iter=1
    previous=$(expr $iter - 1)
    #Expanding 32-bit r according to E_SELECTION to 48-bit
    er=
    for (( k=0; k<48 ; k++ ))
    do
      index=${E_SELECTION[$k]}
      bit=$(get_bit_from_binary_representation ${r_arr[$previous]} $index)
      er=$er$bit
    done

    #choosing the current key according to the action performed
    #TO DO : add if to determine the right key
    if [[ $action == "-e" ]]; then
      curr_key=${k_perm_arr[$iter]}
    else
      curr_key=${k_perm_arr[$(( 17 - $iter ))]}
    fi

    xor_r=$(( 2#$curr_key ^ 2#$er ))
    xor_r=$(decimal_to_bin $xor_r 48)

    sb=
    #S-BOX1:
    b=$(expr substr $xor_r 1 6)
    b_row=$(get_row_for_sbox $b)
    b_col=$(get_column_for_sbox $b)
    s_output=$(get_sbox_value $b_row $b_col ${S1[@]})
    sb=$sb$s_output
    #S-BOX2:
    b=$(expr substr $xor_r 7 6)
    b_row=$(get_row_for_sbox $b)
    b_col=$(get_column_for_sbox $b)
    s_output=$(get_sbox_value $b_row $b_col ${S2[@]})
    sb=$sb$s_output
    #S-BOX3:
    b=$(expr substr $xor_r 13 6)
    b_row=$(get_row_for_sbox $b)
    b_col=$(get_column_for_sbox $b)
    s_output=$(get_sbox_value $b_row $b_col ${S3[@]})
    sb=$sb$s_output
    #S-BOX4:
    b=$(expr substr $xor_r 19 6)
    b_row=$(get_row_for_sbox $b)
    b_col=$(get_column_for_sbox $b)
    s_output=$(get_sbox_value $b_row $b_col ${S4[@]})
    sb=$sb$s_output
    #S-BOX5:
    b=$(expr substr $xor_r 25 6)
    b_row=$(get_row_for_sbox $b)
    b_col=$(get_column_for_sbox $b)
    s_output=$(get_sbox_value $b_row $b_col ${S5[@]})
    sb=$sb$s_output
    #S-BOX6:
    b=$(expr substr $xor_r 31 6)
    b_row=$(get_row_for_sbox $b)
    b_col=$(get_column_for_sbox $b)
    s_output=$(get_sbox_value $b_row $b_col ${S6[@]})
    sb=$sb$s_output
    #S-BOX7:
    b=$(expr substr $xor_r 37 6)
    b_row=$(get_row_for_sbox $b)
    b_col=$(get_column_for_sbox $b)
    s_output=$(get_sbox_value $b_row $b_col ${S7[@]})
    sb=$sb$s_output
    #S-BOX8:
    b=$(expr substr $xor_r 43 6)
    b_row=$(get_row_for_sbox $b)
    b_col=$(get_column_for_sbox $b)
    s_output=$(get_sbox_value $b_row $b_col ${S8[@]})
    sb=$sb$s_output

    #Permutation of 32-bit right sided digested bits according to FINAL_P
    f=
    for (( i=0 ; i<32 ; i++ ))
    {
      index=${FINAL_P[$i]}
      bit=$(get_bit_from_binary_representation $sb $index)
      f=$f$bit
    }

    #xor f with previous l block => right next block
    r_next=$(( 2#${l_arr[$previous]} ^ 2#$f ))
    r_next=$(decimal_to_bin $r_next 32)

    r_arr+=($r_next)
    l_arr+=(${r_arr[$previous]})

  done

  #final reversed processed block permutation according to IP-1
  rl16=${r_arr[16]}${l_arr[16]}
  proc_m=
  for (( i=0 ; i<64 ; i++ ))
  do
    index=${IP_1[$i]}
    bit=$(get_bit_from_binary_representation $rl16 $index)
    proc_m=$proc_m$bit
  done

  echo proc_m=$proc_m
  proc_m_str=$(bin_to_string $proc_m)
  echo proc_m_str=$proc_m_str
  echo proc_m_str_len=${proc_m_str}
  printf "$proc_m_str">>$out_file

done
